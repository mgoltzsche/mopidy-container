# DO NOT EDIT THIS FILE MANUALLY!
# It is maintained within the upstream kpt package (see Kptfile).
# Committing manual changes to this file, disables blueprint updates.

KPT_IMAGE ?= mgoltzsche/kpt-docker:1.0.0-beta.21
KPT_PKG_UPDATE_STRATEGY ?= resource-merge
SKAFFOLD_IMAGE ?= gcr.io/k8s-skaffold/skaffold/v2:v2.0.0-beta1
SKAFFOLD_OPTS ?=
KUBECONFIG ?= $$HOME/.kube/config

DOCKER ?= docker
PLATFORM_ARCH = $(shell uname -m | sed -E 's!x86_64!amd64!')
PLATFORM_OS = $(shell uname -o | sed -E 's!GNU/(Linux)!\1!' | tr '[:upper:]' '[:lower:]')
PLATFORM ?= $(PLATFORM_OS)/$(PLATFORM_ARCH)
PLATFORMS = $(shell grep platforms: skaffold.yaml | sed -E 's/\s+platforms: +//')


.PHONY: all
all: image

##@ Build

.PHONY: image
image: skaffold-build ## Build the image(s) for the host architecture.

##@ Deploy

.PHONY: deploy
deploy: skaffold-run ## Deploy the application into selected cluster.
.PHONY: undeploy
undeploy: skaffold-delete ## Undeploy the debug application.

.PHONY: debug
debug: SKAFFOLD_OPTS = --auto-build
debug: skaffold-debug ## Deploy the application in debug mode.

##@ Development

.PHONY: render
render: kpt-fn-render ## Run kpt render pipeline, applying setters.yaml.
kpt-fn-render: kpt-fn-%:
	$(DOCKER) run -i --rm -u "`id -u`:`id -g`" --group-add 998 \
		-v "/var/run/docker.sock:/var/run/docker.sock" \
		-v "`pwd`:/workspace" \
		$(KPT_IMAGE) fn $* /workspace --truncate-output=false

.PHONY: update
update: kpt-pkg-update render ## Apply the latest blueprint updates to this codebase.

kpt-pkg-update:
	mkdir -p $$HOME/.kpt
	$(DOCKER) run --rm -u "`id -u`:`id -g`" -v "$$HOME/.kpt:/.kpt" \
		-v `pwd`:/data -w /data \
		$(KPT_IMAGE) pkg update --strategy=$(KPT_PKG_UPDATE_STRATEGY) .

skaffold-run skaffold-stop skaffold-build skaffold-dev skaffold-delete skaffold-debug skaffold-survey skaffold-help: skaffold-%:
	$(DOCKER) run -it --rm -v "`pwd`:/workspace" -w /workspace --network=host \
		-v "/var/run/docker.sock:/var/run/docker.sock" \
		--mount "type=bind,src=$$HOME/.docker,dst=/tmp/.docker" \
		--mount "type=bind,src=$(KUBECONFIG),dst=/tmp/.kube/config,ro" \
		-e HOME=/tmp \
		$(SKAFFOLD_IMAGE) skaffold $* $(SKAFFOLD_OPTS)

.PHONY: help
help: ## Display this help.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Release

.PHONY: release
release: SKAFFOLD_OPTS = --push --platform=$(PLATFORMS)
release: skaffold-build ## Build and push the multi-arch image(s).

.PHONY: binfmt-config
binfmt-config: ## Enable multi-arch support on the host.
	$(DOCKER) run --rm --privileged multiarch/qemu-user-static:7.0.0-7 --reset -p yes
